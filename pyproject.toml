[tool.ruff]
target-version = "py313"
line-length = 100        # Match workspace standard

[tool.ruff.lint]
# Enable various rule sets
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "I",    # isort
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "UP",   # pyupgrade
  "ARG",  # flake8-unused-arguments
  "SIM",  # flake8-simplify
  "PTH",  # flake8-use-pathlib
  "N",    # pep8-naming
  "ERA",  # eradicate (commented-out code)
  "PD",   # pandas-vet
  "PGH",  # pygrep-hooks
  "PL",   # pylint
  "TRY",  # tryceratops
  "FLY",  # flynt
  "NPY",  # NumPy-specific rules
  "AIR",  # Airflow
  "PERF", # Perflint
  "RUF",  # Ruff-specific rules
]

ignore = [
  "E501",    # line too long (handled by formatter)
  "B008",    # do not perform function calls in argument defaults
  "PLR0913", # Too many arguments to function call
  "PLR0912", # Too many branches
  "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [ "ARG", "S101", "PLR2004" ] # Allow unused arguments, asserts, and magic values in tests
"scripts/*" = [ "T201" ]                 # Allow print statements in scripts

[tool.ruff.lint.isort]
known-first-party = [ "braincraftio" ]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

# pytest configuration
[tool.pytest.ini_options]
testpaths = [ "tests" ]
python_files = [ "test_*.py", "*_test.py" ]
python_classes = [ "Test*" ]
python_functions = [ "test_*" ]
addopts = "-ra -q --strict-markers"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = [ "." ]
omit = [
  "*/tests/*",
  "*/test_*",
  "*_test.py",
  "*/venv/*",
  "*/node_modules/*",
  "*/actions/*",
  "*/containers/*",
  "*/dot-github/*",
  "*/style-system/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
