#!/usr/bin/env bash
# Execute git commands across all child repositories

# Ensure at least one argument is provided
if [[ $# -eq 0 ]]; then
    echo "‚ùå Error: No git command provided"
    echo "Usage: mise run git <command> [args...]"
    echo "Example: mise run git status"
    echo "Example: mise run git pull"
    exit 1
fi

# Store the git command and arguments as an array
git_cmd=("$@")

# Track if any repos were found
found_repos=0

# Track if any errors occurred
had_errors=0

# First, run in the current directory (workspace root)
if [[ -d ".git" ]]; then
    found_repos=1
    echo "üìÇ [workspace]"
    
    if git "${git_cmd[@]}"; then
        echo  # Add blank line for readability
    else
        echo "‚ùå Error executing 'git ${git_cmd[*]}' in workspace"
        had_errors=1
        echo  # Add blank line for readability
    fi
fi

# Find all child directories containing .git (indicating they are git repos)
for repo_dir in */; do
    # Remove trailing slash
    repo_dir="${repo_dir%/}"
    
    # Check if it's a git repository
    if [[ -d "${repo_dir}/.git" ]]; then
        found_repos=1
        echo "üìÇ [${repo_dir}]"
        
        # Execute the git command in the repository
        if cd "${repo_dir}" && git "${git_cmd[@]}"; then
            echo  # Add blank line for readability
        else
            echo "‚ùå Error executing 'git ${git_cmd[*]}' in ${repo_dir}"
            had_errors=1
            echo  # Add blank line for readability
        fi
        
        # Return to workspace root
        cd "${WORKSPACE_ROOT:-$(dirname "$0")/../../..}" || exit 1
    fi
done

# Check if any repositories were found
if [[ ${found_repos} -eq 0 ]]; then
    echo "‚ö†Ô∏è  No git repositories found in the current directory"
    exit 1
fi

# Exit with error if any command failed
if [[ ${had_errors} -ne 0 ]]; then
    echo "‚ö†Ô∏è  Some repositories had errors"
    exit 1
fi