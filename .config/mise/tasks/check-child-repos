#!/usr/bin/env bash
# shellcheck shell=bash
#
# check-child-repos - Prevent accidentally staging files from child repositories
#
# Purpose:
#   Uses the git task's --list-child-repos flag to dynamically detect all child
#   repositories and prevent their files from being staged in the parent repo
#
# Usage:
#   mise run security:git:check:child-repos
#
# Exit Codes:
#   0 - No child repository files are staged
#   1 - Child repository files are staged
#
#MISE description="üö´ Prevents accidentally staging files from child repositories"
#MISE hide=true

set -uo pipefail

# Get list of child repositories programmatically
# The output format is "[git] repo-name", we need to extract just the repo names
child_repos=()
while IFS= read -r line; do
    # Extract repo name from lines like "[git] actions"
    if [[ "${line}" =~ ^\[git\]\ (.+)$ ]]; then
        repo_name="${BASH_REMATCH[1]}"
        # Skip the command line and "Finished in" output
        if [[ "${repo_name}" != "$"* ]] && [[ "${repo_name}" != "Finished in"* ]]; then
            child_repos+=("${repo_name}")
    fi
  fi
done < <(mise run git --list-child-repos 2>&1)

# If no child repos found, nothing to check
if [[ ${#child_repos[@]} -eq 0 ]]; then
    exit 0
fi

# Build regex pattern for all child repos
regex_pattern="^($(
                   IFS='|'
                            echo "${child_repos[*]}"
))/"

# Check if any staged files are in child repositories
staged_child_files=$(git ls-files --cached | grep -E "${regex_pattern}" || true)

if [[ -n "${staged_child_files}" ]]; then
    echo "‚ùå Error: Attempting to stage files from child repositories!"
    echo ""
    echo "The following files are staged but belong to child repos:"
    # Use printf to avoid SC2001
    while IFS= read -r file; do
        echo "  - ${file}"
  done   <<< "${staged_child_files}"
    echo ""
    echo "Child repositories should be managed independently."
    echo "To unstage these files, run:"
    echo "  git reset HEAD -- ${child_repos[*]}"
    exit 1
fi
