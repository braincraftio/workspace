# BrainCraft.io Workspace Configuration
# Minimal root that loads modular components

# Mise automatically discovers and loads configuration from these locations:
#
# Configuration Files (.config/mise/conf.d/):
# - 00-env.toml       Environment variables and paths
# - 00-tools.toml     Tool versions (go, node, python, etc.)
# - 00-vars.toml      Task variables (build flags, test settings)
#
# Executable Tasks (.config/mise/tasks/):
# - doctor-workspace      Health check for workspace (`mr dr`)
# - git                  Repository operations wrapper
# - exec                 Execute commands across repos
# - lint-bash-shellcheck Shellcheck wrapper
# - lint-bash-dead-code  Dead code finder
#
# Shared Libraries (.config/mise/lib/):
# - common.sh        Reusable bash functions
# - workspace.sh     Repository operations from workspace.json


# Settings
[settings]
status.show_env = true
yes = true
verbose = false
always_keep_download = false
legacy_version_file = true
activate_aggressive = true
task_output = "prefix"
auto_install = true
task_run_auto_install = true
trusted_config_paths = ["/workspace/", "/workspace/actions/", "/workspace/dot-github/", "/workspace/containers", "/workspace/style-system" ]
color = true
jobs = 4

go_download_mirror = "https://dl.google.com/go"
go_repo = "https://github.com/golang/go"

# Task aliases
[alias]
i = "install"
b = "build"
t = "test"
# l = "lint"  # Removed - conflicts with lint task
f = "format"
g = "git"
x = "exec"
d = "doctor"

# Core tasks
[tasks.setup]
description = "Initial workspace setup and configuration"
depends = ["setup:tools", "setup:repos", "setup:hooks", "git:setup"]
alias = ["s", "init"]

[tasks."setup:tools"]
description = "Install all required tools"
run = "mise install"

[tasks."setup:repos"]
description = "Clone all child repositories"
run = "mise run git:clone"

[tasks."setup:hooks"]
description = "Install git hooks (pre-commit)"
run = "pre-commit install --install-hooks"

[tasks."git:setup"]
description = "Configure Git user and credential helper"
run = "mise run git-setup"

[tasks."doctor:workspace"]
description = "Enterprise-grade workspace health check with actionable fixes"
run = "mise run doctor-workspace"
alias = ["dr", "doctor"]

# Linting tasks
[tasks.lint]
description = "Run all linters across the polyglot workspace"
depends = ["lint:bash", "lint:markdown"]

[tasks."lint:bash"]
description = "Run all bash linters and quality checks"
depends = ["lint:bash:shellcheck", "lint:bash:dead-code"]

[tasks."lint:bash:shellcheck"]
description = "Lint bash scripts with shellcheck for style and errors"
run = "mise run lint-bash-shellcheck"
alias = ["shellcheck"]

[tasks."lint:bash:dead-code"]
description = "Find unused functions in bash scripts"
run = "mise run lint-bash-dead-code"
alias = ["dead", "unused"]

[tasks."lint:markdown"]
description = "Run all markdown linters and link checkers"
depends = ["lint:markdown:format", "lint:markdown:links"]

[tasks."lint:markdown:format"]
description = "Lint markdown files with markdownlint"
run = "markdownlint-cli2 '**/*.md' '#node_modules' '#.git'"
alias = ["mdlint"]

# Markdown link checking - unified task
[tasks."lint:markdown:links"]
description = "Check markdown links across repositories"
run = '''
#!/usr/bin/env bash
set -euo pipefail

# Default configuration
OFFLINE="--offline"
TARGETS=()

# Check for --online flag
if [[ "${1:-}" == "--online" ]]; then
  OFFLINE=""
  shift
fi

# Use remaining args as targets if provided
if [[ $# -gt 0 ]]; then
  TARGETS=("$@")
else
  # Default: check markdown files in workspace and child repos only
  TARGETS=(
    "*.md"
    ".github/**/*.md"
    ".config/**/*.md"
    "actions/**/*.md"
    "containers/**/*.md"
    "style-system/**/*.md"
    "dot-github/**/*.md"
  )
fi

# Build command
CMD="lychee --no-progress $OFFLINE"
[[ -f "lychee.toml" ]] && CMD="$CMD --config lychee.toml"

# Add exclusions
CMD="$CMD --exclude-path '.npm-global' --exclude-path 'node_modules' --exclude-path '.git'"

echo "🔗 Checking markdown links..."
exec $CMD "${TARGETS[@]}"
'''
alias = ["mdlinks"]

[tasks."lint:markdown:report"]
description = "Generate broken links report for all repositories"
run = '''
#!/usr/bin/env bash
set -euo pipefail

mkdir -p .reports

# Check each repository
for repo in . actions containers style-system dot-github; do
  if [[ -d "$repo" ]]; then
    echo "📊 Checking $repo..."
    if [[ "$repo" == "." ]]; then
      # For workspace root, check specific files
      lychee --offline --format markdown --output ".reports/broken-links-workspace.md" \
        --exclude-path '.npm-global' --exclude-path 'node_modules' \
        "*.md" ".github/**/*.md" ".config/**/*.md" 2>/dev/null || true
    else
      # For child repos, check all markdown
      lychee --offline --format markdown --output ".reports/broken-links-${repo//\//-}.md" \
        --exclude-path 'node_modules' \
        "$repo/**/*.md" 2>/dev/null || true
    fi
  fi
done

# Consolidate reports
echo "📋 Consolidating reports..."
cat .reports/broken-links-*.md > .reports/broken-links-all.md 2>/dev/null || echo "No broken links found!"
echo "✅ Report saved to: .reports/broken-links-all.md"
'''
alias = ["mdreport"]

# Git tasks
[tasks."git:status"]
description = "Show git status across all repositories"
run = "mise run git status --porcelain"
alias = ["gs"]

[tasks."git:clone"]
description = "Clone all child repositories"
run = "mise run git clone"
alias = ["gc", "clone"]

[tasks."git:pull"]
description = "Pull latest changes for all repositories"
run = "mise run git pull"
alias = ["gp", "pull"]

[tasks."git:fetch"]
description = "Fetch updates for all repositories"
run = "mise run git fetch"
alias = ["gf", "fetch"]

[tasks."git:branch"]
description = "Show branches for all repositories"
run = "mise run git branch"
alias = ["gb"]

[tasks."git:log"]
description = "Show recent commits for all repositories"
run = "mise run git log --oneline -5"
alias = ["gl"]

# Pre-commit tasks
[tasks."pre-commit:install"]
description = "Install pre-commit hooks for the workspace"
run = "pre-commit install --install-hooks"
alias = ["pci"]

[tasks."pre-commit:run"]
description = "Run pre-commit checks on all files"
run = "pre-commit run --all-files"
alias = ["pc", "precommit"]

[tasks."pre-commit:run:staged"]
description = "Run pre-commit checks on staged files only"
run = "pre-commit run"
alias = ["pcs"]

[tasks."pre-commit:update"]
description = "Update pre-commit hooks to latest versions"
run = "pre-commit autoupdate"
alias = ["pcu"]

[tasks."pre-commit:clean"]
description = "Clean pre-commit cache"
run = "pre-commit clean && pre-commit gc"
alias = ["pcc"]

# Formatting tasks
[tasks.format]
description = "Format all code (runs pre-commit formatters)"
run = "pre-commit run --all-files prettier shfmt biome-format-json black || true"
alias = ["fmt"]

[tasks."format:fix"]
description = "Auto-fix all code issues"
run = "pre-commit run --all-files"
alias = ["fix"]

# Validation tasks
[tasks."validate:mise"]
description = "Validate mise configuration files"
run = '''
#!/usr/bin/env bash
set -euo pipefail

# Check that mise can read all config files
if mise config ls >/dev/null 2>&1; then
  echo "✅ All mise configuration files are valid"
  exit 0
else
  echo "❌ Error reading mise configuration files"
  exit 1
fi
'''
alias = ["validate-mise"]
