#!/usr/bin/env bash
# shellcheck shell=bash
#
# launch-workspace - BrainCraft.io DevContainer Launcher
#
# Purpose: One-command development environment for AI-assisted development
# Usage: launch-workspace [OPTIONS]
# See --help for detailed options
#
# Part of the BrainCraft.io community ecosystem
# https://github.com/braincraftio/workspace

set -uo pipefail

#######################################
# Constants and Configuration
#######################################

readonly SCRIPT_VERSION="1.0.0"
readonly SCRIPT_NAME="${0##*/}"
SCRIPT_DIR_TEMP="$(cd "$(dirname "$0")" && pwd -P)"
readonly SCRIPT_DIR="${SCRIPT_DIR_TEMP}"

# BrainCraft.io branding
readonly BRAINCRAFTIO_BANNER="BrainCraft.io Development Environment"
readonly BRAINCRAFTIO_TAGLINE="Practitioner first AI Codegen Framework"

# DevContainer configuration
# Default image - will be auto-detected from devcontainer.json if possible
readonly DEFAULT_IMAGE="ghcr.io/braincraftio/devcontainer:latest"
readonly WORKSPACE_FILE="braincraft.code-workspace"

# Exit codes
readonly EXIT_SUCCESS=0
readonly EXIT_ERROR=1
readonly EXIT_MISSING_DEPS=2
readonly EXIT_AUTH_FAILURE=3
readonly EXIT_IMAGE_PULL_FAILURE=4

# ANSI color codes for beautiful output
readonly COLOR_RESET='\033[0m'
readonly COLOR_BOLD='\033[1m'
readonly COLOR_DIM='\033[2m'
readonly COLOR_GREEN='\033[0;32m'
readonly COLOR_YELLOW='\033[1;33m'
readonly COLOR_RED='\033[0;31m'
readonly COLOR_BLUE='\033[0;34m'
readonly COLOR_MAGENTA='\033[0;35m'
readonly COLOR_CYAN='\033[0;36m'

# Status icons for visual feedback
readonly ICON_SUCCESS="✅"
readonly ICON_FAILURE="❌"
readonly ICON_WARNING="⚠️"
readonly ICON_INFO="ℹ️"
readonly ICON_ACTIVE="▶"
readonly ICON_ROCKET="🚀"
readonly ICON_DOCTOR="🏥"
readonly ICON_CONTAINER="🐳"
readonly ICON_BRAIN="🧠"
readonly ICON_HEART="💜"
readonly ICON_SPARKLES="✨"
readonly ICON_TOOLS="🛠️"
readonly ICON_CLOCK="⏱️"

# Tool requirements
get_tool_package() {
  local tool="$1"
  case "${tool}" in
    code) echo "visual-studio-code:cask" ;;
    docker) echo "docker:cask" ;;
    gh) echo "gh:formula" ;;
    git) echo "git:formula" ;;
    jq) echo "jq:formula" ;;
    npm) echo "nodejs:formula" ;;
    mise) echo "mise:formula" ;;
    *) echo "" ;;
  esac
}

is_required_tool() {
  local tool="$1"
  case "${tool}" in
    code|docker|gh) return 0 ;;
    *) return 1 ;;
  esac
}

# Runtime configuration
CONFIG_REBUILD=false
CONFIG_USE_DEVCONTAINER_CLI=false
CONFIG_FORCE_VSCODE=false
CONFIG_DOCTOR=false
CONFIG_VERBOSE=false
CONFIG_UPDATE=false
CONFIG_DRY_RUN=false

# Runtime state
STATE_OS_TYPE=""
STATE_OS_NAME=""
STATE_ARCH=""
STATE_CONTAINER_ID=""
STATE_CONTAINER_STATE=""
STATE_CONTAINER_IMAGE=""
STATE_MISSING_DEPS=""
STATE_MISSING_CASKS=""
STATE_DEVCONTAINER_IMAGE=""

#######################################
# Core Utility Functions
#######################################

# Print BrainCraft.io banner
print_banner() {
  echo -e "${COLOR_BLUE}${COLOR_BOLD}"
  echo "╔══════════════════════════════════════════════════════════╗"
  echo "║       ${ICON_BRAIN} ${BRAINCRAFTIO_BANNER} ${ICON_BRAIN}        ║"
  echo "║                                                          ║"
  echo "║         ${BRAINCRAFTIO_TAGLINE}          ║"
  echo "╚══════════════════════════════════════════════════════════╝"
  echo -e "${COLOR_RESET}"
}

# Unified logging function with BrainCraft.io style
log() {
  local level="$1"
  shift
  local message="$*"

  case "${level}" in
    info)
      echo -e "${ICON_INFO} ${message}"
      ;;
    success)
      echo -e "${COLOR_GREEN}${ICON_SUCCESS} ${message}${COLOR_RESET}"
      ;;
    warn)
      echo -e "${COLOR_YELLOW}${ICON_WARNING} ${message}${COLOR_RESET}"
      ;;
    error)
      echo -e "${COLOR_RED}${ICON_FAILURE} ${message}${COLOR_RESET}" >&2
      ;;
    header)
      echo -e "${COLOR_BLUE}${COLOR_BOLD}${message}${COLOR_RESET}"
      ;;
    verbose)
      [[ "${CONFIG_VERBOSE}" == "true" ]] && echo -e "${COLOR_DIM}[DEBUG] ${message}${COLOR_RESET}"
      ;;
    ai)
      echo -e "${COLOR_MAGENTA}${ICON_SPARKLES} ${message}${COLOR_RESET}"
      ;;
    heart)
      echo -e "${COLOR_MAGENTA}${ICON_HEART} ${message}${COLOR_RESET}"
      ;;
    *)
      echo -e "${ICON_INFO} ${message}"
      ;;
  esac
}

# Exit with error message
die() {
  local exit_code="$1"
  shift
  log error "$@"
  echo
  log info "For help, run: ${SCRIPT_NAME} --help"
  log info "For diagnostics, run: ${SCRIPT_NAME} --doctor"
  exit "${exit_code}"
}

# Check if command exists
has_command() {
  command -v "$1" &> /dev/null
}

# Get command version with caching
get_version() {
  local cmd="$1"
  local version=""

  case "${cmd}" in
    git)      version=$(git --version 2> /dev/null | awk '{print $3}') ;;
    gh)       version=$(gh --version 2> /dev/null | head -1 | awk '{print $3}') ;;
    code)     version=$(code --version 2> /dev/null | head -n 1) ;;
    docker)   version=$(docker --version 2> /dev/null | awk '{print $3}' | tr -d ',') ;;
    jq)       version=$(jq --version 2> /dev/null | sed 's/jq-//') ;;
    npm)      version=$(npm --version 2> /dev/null) ;;
    mise)     version=$(mise --version 2> /dev/null | awk '{print $2}') ;;
    *)        version="unknown" ;;
  esac

  echo "${version:-unknown}"
}

# Interactive prompt helper
prompt_yes_no() {
  local prompt="$1"
  local default="${2:-n}"

  local yn_prompt="y/N"
  [[ "${default}" == "y" ]] && yn_prompt="Y/n"

  read -rp "${prompt} (${yn_prompt}) " -n 1
  echo

  if [[ -z "${REPLY}" ]]; then
    [[ "${default}" == "y" ]]
  else
    [[ "${REPLY}" =~ ^[Yy]$ ]]
  fi
}

#######################################
# DevContainer Detection Functions
#######################################

# Detect DevContainer image from configuration
detect_devcontainer_image() {
  local devcontainer_json="${SCRIPT_DIR}/.devcontainer/devcontainer.json"
  local detected_image=""

  log verbose "Detecting DevContainer image configuration..."

  if [[ ! -f "${devcontainer_json}" ]]; then
    log verbose "No devcontainer.json found, using default"
    STATE_DEVCONTAINER_IMAGE="${DEFAULT_IMAGE}"
    return 0
  fi

  # Try to extract image directly from devcontainer.json
  if [[ -f "${devcontainer_json}" ]]; then
    # Look for the image field - handle both quoted and unquoted patterns
    detected_image=$(grep -E '^\s*"image":\s*"[^"]+"' "${devcontainer_json}" 2>/dev/null | sed -E 's/^[[:space:]]*"image":[[:space:]]*"([^"]+)".*/\1/' | head -1)
    
    if [[ -n "${detected_image}" ]]; then
      STATE_DEVCONTAINER_IMAGE="${detected_image}"
      log verbose "Detected image from devcontainer.json: ${STATE_DEVCONTAINER_IMAGE}"
      return 0
    fi
    
    # If simple extraction fails, try with jq if available (for files without comments)
    if has_command jq; then
      # Try direct jq parsing first (will fail if there are comments)
      detected_image=$(jq -r '.image // empty' "${devcontainer_json}" 2>/dev/null || true)
      
      if [[ -n "${detected_image}" ]]; then
        STATE_DEVCONTAINER_IMAGE="${detected_image}"
        log verbose "Detected image from devcontainer.json using jq: ${STATE_DEVCONTAINER_IMAGE}"
        return 0
      fi
    fi

  fi

  # Use default if detection fails
  STATE_DEVCONTAINER_IMAGE="${DEFAULT_IMAGE}"
  log verbose "Using default image: ${STATE_DEVCONTAINER_IMAGE}"
  return 0
}

#######################################
# System Detection Functions
#######################################

detect_system() {
  STATE_ARCH=$(uname -m)

  case "${OSTYPE}" in
    darwin*)
      STATE_OS_TYPE="macos"
      STATE_OS_NAME="macOS $(sw_vers -productVersion 2> /dev/null || echo 'unknown')"
      ;;
    linux-gnu*)
      if grep -q Microsoft /proc/version 2> /dev/null; then
        STATE_OS_TYPE="wsl"
        STATE_OS_NAME="WSL"
      else
        STATE_OS_TYPE="linux"
        STATE_OS_NAME="Linux"
        if [[ -f /etc/os-release ]]; then
          # shellcheck source=/dev/null
          source /etc/os-release
          STATE_OS_NAME="${NAME:-Linux}"
        fi
      fi
      ;;
    msys | cygwin)
      STATE_OS_TYPE="windows"
      STATE_OS_NAME="Windows"
      ;;
    *)
      STATE_OS_TYPE="unknown"
      STATE_OS_NAME="Unknown"
      ;;
  esac

  log verbose "Detected: ${STATE_OS_NAME} (${STATE_OS_TYPE}) on ${STATE_ARCH} with Bash ${BASH_VERSION%.*}"
}

#######################################
# Docker Management Functions
#######################################

# Unified container state checker
get_container_info() {
  local container_id
  container_id=$(docker ps -a \
    --filter "label=devcontainer.local_folder=${SCRIPT_DIR}" \
    --format "{{.ID}}" 2> /dev/null | head -n 1)

  if [[ -z "${container_id}" ]]; then
    STATE_CONTAINER_ID=""
    STATE_CONTAINER_STATE="none"
    return 1
  fi

  STATE_CONTAINER_ID="${container_id}"

  # Get container state
  if docker ps --format "{{.ID}}" 2> /dev/null | grep -q "^${container_id}"; then
    STATE_CONTAINER_STATE="running"
  else
    STATE_CONTAINER_STATE="stopped"
  fi

  # Get container image
  STATE_CONTAINER_IMAGE=$(docker inspect "${container_id}" \
    --format '{{.Config.Image}}' 2> /dev/null || echo "unknown")

  return 0
}

# Check if Docker daemon is running
is_docker_running() {
  docker system info &> /dev/null
}

# Check if image exists locally
has_docker_image() {
  local image="${1:-${STATE_DEVCONTAINER_IMAGE}}"
  docker images --format "{{.ID}}" "${image}" 2> /dev/null | grep -q .
}

# Pull Docker image with retry logic
pull_docker_image() {
  local image="${1:-${STATE_DEVCONTAINER_IMAGE}}"
  local max_retries=3
  local retry=0

  log info "Pulling DevContainer image: ${image}"

  while ((retry < max_retries)); do
    if docker pull "${image}"; then
      log success "Image pulled successfully"
      return 0
    fi

    ((retry++))
    if ((retry < max_retries)); then
      log warn "Pull failed, retrying (${retry}/${max_retries})..."
      sleep 2
    fi
  done

  log error "Failed to pull image after ${max_retries} attempts"
  echo
  log warn "Possible causes:"
  log warn "  1. Not authenticated to ghcr.io"
  log warn "  2. Network connectivity issues"
  log warn "  3. Image doesn't exist or access denied"
  echo
  log warn "To authenticate to GitHub Container Registry:"
  log info "  export GITHUB_TOKEN='your-token-with-read:packages'"
  log info "  echo \$GITHUB_TOKEN | docker login ghcr.io -u YOUR_USERNAME --password-stdin"
  echo
  log info "Get a token at: https://github.com/settings/tokens/new"

  return 1
}

#######################################
# Dependency Management Functions
#######################################

# Check single dependency and track missing ones
check_dependency() {
  local tool="$1"
  local package_info="${2:-}"
  local required="${3:-true}"
  local package_name="${package_info%:*}"
  local package_type="${package_info#*:}"

  if has_command "${tool}"; then
    local version
    version=$(get_version "${tool}")
    log success "${tool} ${version}"
    return 0
  fi

  if [[ "${required}" == "true" ]]; then
    log error "${tool} not found (required)"

    if [[ "${package_type}" == "cask" ]]; then
      STATE_MISSING_CASKS+=" ${package_name}"
    else
      STATE_MISSING_DEPS+=" ${package_name}"
    fi
  else
    log warn "${tool} not found (optional)"
  fi

  return 1
}

# Check all dependencies
check_all_dependencies() {
  local has_missing=false
  STATE_MISSING_DEPS=""
  STATE_MISSING_CASKS=""

  # Check required tools
  for tool in code docker gh; do
    local package_info=$(get_tool_package "${tool}")
    check_dependency "${tool}" "${package_info}" "true" || has_missing=true
  done

  # Check optional tools
  for tool in git jq npm mise; do
    local package_info=$(get_tool_package "${tool}")
    check_dependency "${tool}" "${package_info}" "false" || true
  done

  # Special check for mise
  if has_command mise; then
    log ai "mise detected - AI assistants will love the consistent tooling!"
  fi

  # Check GitHub CLI authentication if gh is available
  if has_command gh; then
    check_github_auth || has_missing=true
  fi

  [[ "${has_missing}" == "false" ]]
}

# Install missing dependencies
install_dependencies() {
  log header "Installing missing dependencies..."

  # Install formulae
  if [[ -n "${STATE_MISSING_DEPS}" ]]; then
    log warn "Installing formulae:${STATE_MISSING_DEPS}"
    # shellcheck disable=SC2086
    brew install ${STATE_MISSING_DEPS} || return 1
  fi

  # Install casks
  if [[ -n "${STATE_MISSING_CASKS}" ]]; then
    log warn "Installing casks:${STATE_MISSING_CASKS}"
    # shellcheck disable=SC2086
    brew install --cask ${STATE_MISSING_CASKS} || return 1

    # Handle Docker post-installation
    if [[ "${STATE_MISSING_CASKS}" == *"docker"* ]]; then
      handle_docker_installation
    fi
  fi

  log success "All dependencies installed"
  return 0
}

# Handle Docker post-installation
handle_docker_installation() {
  log warn "Docker Desktop installed. Starting Docker..."

  if [[ "${STATE_OS_TYPE}" == "macos" ]]; then
    open -a Docker 2> /dev/null || true
  fi

  log info "Waiting for Docker daemon (timeout: 60s)..."

  local timeout=60
  local elapsed=0

  while ! is_docker_running && ((elapsed < timeout)); do
    printf "."
    sleep 2
    ((elapsed += 2))
  done
  echo

  if is_docker_running; then
    log success "Docker is running"
    return 0
  else
    log error "Docker failed to start"
    log warn "  Please start Docker Desktop manually:"
    log info "    macOS: Click Docker in Applications or run: open -a Docker"
    log info "    Linux: sudo systemctl start docker"
    return 1
  fi
}

#######################################
# GitHub Authentication Functions
#######################################

# Check GitHub CLI authentication with improved parsing
check_github_auth() {
  local auth_output
  auth_output=$(gh auth status 2>&1 || true)

  if echo "${auth_output}" | grep -q "✓ Logged in to"; then
    log success "GitHub CLI authenticated"

    # Check for issues
    local account_count
    account_count=$(echo "${auth_output}" | grep -c "✓ Logged in to" || echo 0)
    local has_failures
    has_failures=$(echo "${auth_output}" | grep -q "X Failed to log in to" && echo true || echo false)

    if [[ "${account_count}" -gt 1 ]] || [[ "${has_failures}" == "true" ]]; then
      display_github_accounts "${auth_output}"
    fi

    return 0
  else
    log error "GitHub CLI not authenticated"
    log warn "  Run: gh auth login"
    log warn "  Then: gh auth setup-git"
    return 1
  fi
}

# Display GitHub account details
display_github_accounts() {
  local auth_output="$1"

  log header "  GitHub accounts:"

  # Parse and display accounts
  local current_host=""
  while IFS= read -r line; do
    if [[ "${line}" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]+$ ]]; then
      current_host="${line}"
    elif [[ "${line}" =~ "Logged in to" ]] && [[ -n "${current_host}" ]]; then
      local account status_icon=""
      account=$(echo "${line}" | sed -n 's/.*account \([^ ]*\).*/\1/p')

      if echo "${line}" | grep -q "✓"; then
        if echo "${auth_output}" | grep -A2 "${line}" | grep -q "Active account: true"; then
          status_icon="${COLOR_GREEN}[active] ${ICON_ACTIVE}${COLOR_RESET}"
        fi
      else
        status_icon="${COLOR_RED}[failed] ${ICON_FAILURE}${COLOR_RESET}"
      fi

      printf "    %-20s @ %-20s %b\n" "${account}" "${current_host}" "${status_icon}"
    fi
  done <<< "${auth_output}"
}

#######################################
# Doctor Mode Functions
#######################################

# Run comprehensive system diagnostics
run_doctor() {
  print_banner
  detect_system

  log header "${ICON_DOCTOR} BrainCraft.io Workspace Health Check ${ICON_DOCTOR}"
  log header "Platform: ${STATE_OS_NAME} • ${STATE_ARCH} • Bash ${BASH_VERSION%.*}"
  echo

  # Check for Homebrew on macOS
  if [[ "${STATE_OS_TYPE}" == "macos" ]] && ! has_command brew; then
    die "${EXIT_MISSING_DEPS}" "Homebrew is required on macOS. Install from https://brew.sh"
  fi

  # Check dependencies
  log header "${ICON_TOOLS} Dependencies:"
  if ! check_all_dependencies; then
    echo
    if [[ -n "${STATE_MISSING_DEPS}${STATE_MISSING_CASKS}" ]]; then
      if prompt_yes_no "Install missing dependencies?"; then
        install_dependencies && display_post_install_status
      fi
    fi
  else
    check_docker_health
    check_mise_health
    display_container_diagnostics
    display_doctor_summary
  fi

  exit "${EXIT_SUCCESS}"
}

# Check mise environment health
check_mise_health() {
  echo
  log header "${ICON_TOOLS} Mise Environment:"

  if has_command mise; then
    log success "mise $(get_version mise)"

    # Check mise doctor
    if mise doctor > /dev/null 2>&1; then
      log success "mise doctor: Healthy"
    else
      log warn "mise doctor: Issues detected"
      log info "  Run 'mise doctor' for details"
    fi

    # Check if .mise.toml exists
    if [[ -f "${SCRIPT_DIR}/.mise.toml" ]]; then
      log success ".mise.toml found"

      # Check if mise is trusted
      if mise list > /dev/null 2>&1; then
        log success "mise configuration trusted"
      else
        log warn "mise configuration not trusted"
        log info "  Run: mise trust --yes"
      fi
    else
      log warn ".mise.toml not found in workspace"
    fi
  else
    log warn "mise not installed"
    log info "  Install with: brew install mise"
    log info "  mise provides consistent tool versions across dev/CI/AI contexts"
  fi
}

# Check Docker system health
check_docker_health() {
  echo
  log header "${ICON_CONTAINER} Docker System Health"

  if ! is_docker_running; then
    log error "Docker daemon is not running"
    log warn "  Start Docker Desktop:"
    log info "    macOS: open -a Docker"
    log info "    Linux: sudo systemctl start docker"
    return 1
  fi

  log success "Docker daemon is running"

  # Display Docker info
  local docker_version
  docker_version=$(get_version docker)
  log info "  Version: ${docker_version}"

  # Check for DevContainer image
  echo
  log info "DevContainer image status:"
  if has_docker_image "${STATE_DEVCONTAINER_IMAGE}"; then
    log success "  Image exists locally"

    # Handle update flag in doctor mode
    if [[ "${CONFIG_UPDATE}" == "true" ]]; then
      echo
      log info "Force update requested"
      if pull_docker_image "${STATE_DEVCONTAINER_IMAGE}"; then
        log success "Image updated successfully"
      else
        log error "Failed to update image"
      fi
    fi
  else
    log warn "  Image not found locally"
    log info "  Will need to pull: ${STATE_DEVCONTAINER_IMAGE}"
  fi

  return 0
}

# Display container diagnostics
display_container_diagnostics() {
  echo
  log header "${ICON_CONTAINER} Container Diagnostics"

  if get_container_info; then
    log info "Container found:"
    log info "  ID:    ${STATE_CONTAINER_ID:0:12}"
    log info "  State: ${STATE_CONTAINER_STATE}"
    if [[ "${STATE_CONTAINER_IMAGE}" == vsc-* ]]; then
      log info "  Image: VS Code DevContainer (auto-generated)"
    else
      log info "  Image: ${STATE_CONTAINER_IMAGE}"
    fi

    case "${STATE_CONTAINER_STATE}" in
      running)
        log success "  Status: Container is running"
        ;;
      stopped)
        log warn "  Status: Container is stopped"
        ;;
      *)
        log error "  Status: Unknown container state: ${STATE_CONTAINER_STATE}"
        ;;
    esac
  else
    log info "No existing container found for this workspace"
  fi
}

# Display doctor summary with action items
display_doctor_summary() {
  echo
  log success "Doctor check complete"

  local has_issues=false
  local action_items=()

  # Check git credential helper
  if ! git config --list 2> /dev/null | grep -q "credential.*helper=!gh auth git-credential"; then
    has_issues=true
    if git config --list 2> /dev/null | grep -q "credential.*helper=!/opt/homebrew/bin/gh"; then
      action_items+=("fix_homebrew_path")
    else
      action_items+=("setup_git_credentials")
    fi
  fi

  # Check if mise needs setup
  if has_command mise && [[ -f "${SCRIPT_DIR}/.mise.toml" ]]; then
    if ! mise list > /dev/null 2>&1; then
      has_issues=true
      action_items+=("trust_mise")
    fi
  fi

  # Check if image needs pulling
  if ! has_docker_image "${STATE_DEVCONTAINER_IMAGE}"; then
    has_issues=true
    action_items+=("pull_image")
  fi

  # Display action items
  if [[ "${has_issues}" == "true" ]]; then
    echo
    log warn "Actions needed:"

    for item in "${action_items[@]}"; do
      case "${item}" in
        setup_git_credentials)
          echo
          log warn "  Configure Git credentials:"
          log header "    gh auth setup-git"
          ;;
        fix_homebrew_path)
          echo
          log warn "  Fix homebrew path in Git config:"
          log info "    Edit ~/.gitconfig: change '/opt/homebrew/bin/gh' to '!gh'"
          ;;
        trust_mise)
          echo
          log warn "  Trust mise configuration:"
          log header "    mise trust --yes"
          ;;
        pull_image)
          echo
          log warn "  Pull DevContainer image:"
          log header "    docker pull ${STATE_DEVCONTAINER_IMAGE}"
          ;;
        *)
          log error "  Unknown action item: ${item}"
          ;;
      esac
    done
  fi

  echo
  log success "${ICON_ROCKET} Ready to launch: ${SCRIPT_NAME}"
  log ai "Perfect environment for AI-assisted development!"
}

# Display post-installation status
display_post_install_status() {
  echo
  log header "Installation complete! Current versions:"

  for tool in code docker gh git mise; do
    if has_command "${tool}"; then
      local version
      version=$(get_version "${tool}")
      log success "  ${tool} ${version}"
    fi
  done

  echo
  log success "Ready to launch! Run:"
  log header "  ${SCRIPT_NAME}"
}

#######################################
# VS Code and DevContainer Functions
#######################################

# Ensure VS Code extension is installed
ensure_vscode_extension() {
  log info "Checking VS Code extensions..."

  # Array of required extensions for BrainCraft.io
  local required_extensions=(
    "ms-vscode-remote.remote-containers"
    "github.vscode-github-actions"
    "golang.go"
    "rust-lang.rust-analyzer"
    "ms-python.python"
  )

  local missing_extensions=()

  # Check which extensions are missing
  for ext in "${required_extensions[@]}"; do
    if ! code --list-extensions 2> /dev/null | grep -q "${ext}"; then
      missing_extensions+=("${ext}")
    fi
  done

  # Install missing extensions
  if [[ ${#missing_extensions[@]} -eq 0 ]]; then
    log success "All required extensions already installed"
  else
    for ext in "${missing_extensions[@]}"; do
      log info "Installing ${ext} extension..."
      if code --install-extension "${ext}" &> /dev/null; then
        log success "  ${ext} installed"
      else
        log error "  Failed to install ${ext}"
        log warn "  Try installing manually:"
        log info "    code --install-extension ${ext}"
        return 1
      fi
    done
  fi

  return 0
}

# Launch VS Code with URI
launch_vscode_with_uri() {
  local pwd_hex
  pwd_hex=$(echo -n "${SCRIPT_DIR}" | xxd -p | tr -d '\n')
  local uri="vscode-remote://dev-container+${pwd_hex}/workspace"

  log success "Opening VS Code ${ICON_ROCKET}"
  log verbose "URI: ${uri}"

  if [[ "${CONFIG_DRY_RUN}" == "true" ]]; then
    log info "[DRY RUN] Would execute: code --folder-uri \"${uri}\""
  else
    code --folder-uri "${uri}"
  fi
}

# Launch with devcontainer CLI
launch_with_devcontainer_cli() {
  log success "Using devcontainer CLI..."

  # Ensure image is available
  if ! has_docker_image "${STATE_DEVCONTAINER_IMAGE}"; then
    pull_docker_image "${STATE_DEVCONTAINER_IMAGE}" || return 1
  fi

  # Build command arguments
  local -a args=()
  [[ "${CONFIG_REBUILD}" == "true" ]] && args+=("--remove-existing-container")

  # Check if already running
  get_container_info
  if [[ "${STATE_CONTAINER_STATE}" == "running" ]] && [[ "${CONFIG_REBUILD}" != "true" ]]; then
    log success "Container already running"
    launch_vscode_with_uri
    return 0
  fi

  # Start devcontainer
  log info "Starting devcontainer..."

  if [[ "${CONFIG_DRY_RUN}" == "true" ]]; then
    log info "[DRY RUN] Would execute: devcontainer up --workspace-folder . ${args[*]}"
  else
    if devcontainer up --workspace-folder . "${args[@]}"; then
      log success "DevContainer started"
      launch_vscode_with_uri
      display_launch_success
      return 0
    else
      log error "Failed to start devcontainer"
      log warn "  Check Docker is running: docker ps"
      log warn "  View logs: docker logs <container-id>"
      log warn "  Try manual start: devcontainer up --workspace-folder ."
      return 1
    fi
  fi
}

# Display launch success message
display_launch_success() {
  echo
  log success "VS Code launching with devcontainer ${ICON_ROCKET}"
  log success "Workspace: ${WORKSPACE_FILE}"
  log success "Working directory: /workspace"
  echo
  log ai "AI assistants (Claude, Copilot) will have full context!"
  log info "Run 'mise tasks' in terminal to see available commands"
}

#######################################
# Main Workflow Functions
#######################################

# Main launch workflow
launch_workspace() {
  print_banner
  detect_system
  detect_devcontainer_image

  # Check dependencies
  log header "Checking dependencies..."
  if ! check_all_dependencies; then
    echo
    die "${EXIT_MISSING_DEPS}" "Missing dependencies! Run: ${SCRIPT_NAME} --doctor"
  fi

  log success "All dependencies ready"

  # Verify GitHub authentication
  if has_command gh; then
    local auth_output
    auth_output=$(gh auth status 2>&1 || true)
    if ! echo "${auth_output}" | grep -q "✓ Logged in to"; then
      echo
      log error "GitHub CLI not authenticated"
      log warn "  Run: gh auth login"
      log warn "  Then: gh auth setup-git"
      die "${EXIT_AUTH_FAILURE}" "Authentication required"
    fi
  fi

  # Check container state
  get_container_info
  if [[ -n "${STATE_CONTAINER_ID}" ]]; then
    log verbose "Found container in ${STATE_CONTAINER_STATE} state"
  fi

  echo
  log success "Working directory: ${SCRIPT_DIR}"

  # Ensure VS Code extension
  ensure_vscode_extension

  # Ensure image is available
  if [[ "${CONFIG_UPDATE}" == "true" ]]; then
    echo
    log info "Force update requested"
    pull_docker_image "${STATE_DEVCONTAINER_IMAGE}" || die "${EXIT_IMAGE_PULL_FAILURE}" "Cannot proceed without image"
    # Update implies rebuild unless in doctor mode
    if [[ "${CONFIG_DOCTOR}" != "true" ]]; then
      CONFIG_REBUILD=true
      log info "Update flag implies rebuild"
    fi
  elif ! has_docker_image "${STATE_DEVCONTAINER_IMAGE}"; then
    echo
    log info "DevContainer image not found"
    pull_docker_image "${STATE_DEVCONTAINER_IMAGE}" || die "${EXIT_IMAGE_PULL_FAILURE}" "Cannot proceed without image"
  fi

  # Handle rebuild
  if [[ "${CONFIG_REBUILD}" == "true" ]] && [[ -n "${STATE_CONTAINER_ID}" ]]; then
    log info "Removing existing container..."
    if [[ "${CONFIG_DRY_RUN}" != "true" ]]; then
      docker stop "${STATE_CONTAINER_ID}" > /dev/null 2>&1 || true
      docker rm "${STATE_CONTAINER_ID}" > /dev/null 2>&1 || true
    else
      log info "[DRY RUN] Would remove container ${STATE_CONTAINER_ID:0:12}"
    fi
  fi

  # Determine launch method
  if [[ "${CONFIG_FORCE_VSCODE}" == "true" ]]; then
    echo
    log warn "Using VS Code URI method (forced)"
    launch_vscode_with_uri
    display_launch_success
  elif has_command npm; then
    # Check for devcontainer CLI
    if ! has_command devcontainer; then
      echo
      log warn "DevContainer CLI not found"
      log info "For better container management, install it with:"
      log header "  npm install -g @devcontainers/cli"
      log info "Using VS Code URI method instead"
      launch_vscode_with_uri
      display_launch_success
    else
      echo
      if ! launch_with_devcontainer_cli; then
        log warn "Falling back to VS Code URI method"
        launch_vscode_with_uri
        display_launch_success
      fi
    fi
  else
    echo
    log info "Using VS Code URI method (npm not found)"
    launch_vscode_with_uri
    display_launch_success
  fi

  # Display tips
  echo
  log header "${ICON_SPARKLES} Tips for BrainCraft.io Development:"
  log info "  • Use 'mise tasks' to see all available commands"
  log info "  • Run 'mise run doctor' for environment health check"
  log info "  • Check WARPSPEED.md for daily command reference"
  log info "  • Visit WORKSPACE.md for architecture details"
  echo
  log heart "Welcome to the BrainCraft.io community!"
}

#######################################
# Command Line Interface
#######################################

# Display help message
show_help() {
  print_banner
  cat << EOF
${SCRIPT_NAME} v${SCRIPT_VERSION}

Launch VS Code with BrainCraft.io DevContainer and workspace configuration.
Perfect environment for AI-assisted development with 100% dev/CI/AI parity.

USAGE:
  ${SCRIPT_NAME} [OPTIONS]

OPTIONS:
  --doctor            Run comprehensive system health check
  --rebuild           Force rebuild container
  --update            Force pull latest image (works with --doctor)
  --help              Show this help message
  --verbose           Enable verbose debug output
  --devcontainer-cli  Force devcontainer CLI method
  --vscode            Force VS Code URI method
  --dry-run           Preview actions without executing
  --version           Show version information

EXAMPLES:
  ${SCRIPT_NAME} --doctor           # First time setup & diagnostics
  ${SCRIPT_NAME}                    # Daily launch
  ${SCRIPT_NAME} --rebuild          # Fresh container
  ${SCRIPT_NAME} --update           # Update to latest image
  ${SCRIPT_NAME} --doctor --update  # Update and check health

EXIT CODES:
  0 - Success
  1 - General error
  2 - Missing dependencies
  3 - Authentication failure
  4 - Docker image pull failure

ENVIRONMENT:
  VERBOSE=true        Enable verbose output
  NO_COLOR=true       Disable colored output

For more information:
  • Quick start: WARPSPEED.md
  • Architecture: WORKSPACE.md
  • Contributing: CONTRIBUTING.md
  • Community: https://github.com/braincraftio/workspace/discussions

${ICON_HEART} Part of the BrainCraft.io open source ecosystem
EOF
  exit 0
}

# Parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --doctor)
        CONFIG_DOCTOR=true
        ;;
      --rebuild)
        CONFIG_REBUILD=true
        ;;
      --update)
        CONFIG_UPDATE=true
        ;;
      --verbose)
        CONFIG_VERBOSE=true
        ;;
      --devcontainer-cli)
        CONFIG_USE_DEVCONTAINER_CLI=true
        ;;
      --vscode)
        CONFIG_FORCE_VSCODE=true
        ;;
      --dry-run)
        CONFIG_DRY_RUN=true
        CONFIG_VERBOSE=true  # Dry run implies verbose
        ;;
      --help | -h)
        show_help
        ;;
      --version | -v)
        echo "${SCRIPT_NAME} v${SCRIPT_VERSION}"
        echo "Part of BrainCraft.io - Building the future of AI-assisted development"
        exit 0
        ;;
      -*)
        die "${EXIT_ERROR}" "Unknown option: $1"
        ;;
      *)
        die "${EXIT_ERROR}" "Unexpected argument: $1"
        ;;
    esac
    shift
  done
}

#######################################
# Main Entry Point
#######################################

main() {
  # Enable verbose from environment
  [[ "${VERBOSE:-}" == "true" ]] && CONFIG_VERBOSE=true

  # Disable colors if requested
  if [[ "${NO_COLOR:-}" == "true" ]]; then
    COLOR_RESET=""
    COLOR_BOLD=""
    COLOR_DIM=""
    COLOR_GREEN=""
    COLOR_YELLOW=""
    COLOR_RED=""
    COLOR_BLUE=""
    COLOR_MAGENTA=""
    COLOR_CYAN=""
  fi

  # Parse arguments
  parse_arguments "$@"

  # Run appropriate mode
  if [[ "${CONFIG_DOCTOR}" == "true" ]]; then
    run_doctor
  else
    launch_workspace
  fi
}

# Ensure we can handle errors gracefully
trap 'echo -e "\n${COLOR_RED}${ICON_FAILURE} Interrupted${COLOR_RESET}"' INT TERM

# Execute main function
main "$@"
